<?php
/**
 * Test case
 *
 * Copyright (c) 2007-2009, Mayflower GmbH
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *   * Neither the name of Mayflower GmbH nor the names of his
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @category   PHP_CodeBrowser
 * @package    PHP_CodeBrowser
 * @subpackage PHPUnit
 * @author     Elger Thiele <elger.thiele@mayflower.de>
 * @copyright  2007-2009 Mayflower GmbH
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @version    SVN: $Id$
 * @link       http://www.phpunit.de/
 * @since      File available since 1.0
 */

require_once realpath(dirname( __FILE__ ) . '/../AbstractTests.php');

/**
 * CbErrorHandlerTest
 *
 * @category   PHP_CodeBrowser
 * @package    PHP_CodeBrowser
 * @subpackage PHPUnit
 * @author     Elger Thiele <elger.thiele@mayflower.de>
 * @copyright  2007-2009 Mayflower GmbH
 * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
 * @version    Release: @package_version@
 * @link       http://www.phpunit.de/
 * @since      Class available since 1.0
 */
class CbErrorHandlerTest extends CbAbstractTests 
{
    /**
     * ErrorHandler object to test
     * 
     * @var cbErrorHandler
     */
    protected $_cbErrorHandler;
    
    /**
     * Mock object for cbXMLHandler
     * 
     * @var object
     */
    protected $_mockXMLHandler;
    
    /**
     * Reference file to check.
     * All PHP_CodeBrowser errors and XML files relay on this file.
     * 
     * @var string
     */
    protected $_fileName = 'src/JSGenerator.php';
    
    /**
     * Needed attributes for phpcb errors
     * 
     * @var array
     */
    protected $_neededKeys = array('line', 'to-line', 'source', 'severity', 'description');
    
    /**
     * (non-PHPdoc)
     * @see tests/cbAbstractTests#setUp()
     */
    protected function setUp()
    {
        parent::setUp();
        $this->_mockXMLHandler = $this->_getMockXMLHandler();
        $this->_cbErrorHandler = new CbErrorHandler($this->_mockXMLHandler);
    }
    
    /**
     * (non-PHPdoc)
     * @see tests/cbAbstractTests#tearDown()
     */
    protected function tearDown()
    {
        parent::tearDown();
    }
    
    /**
     * Test constructor if objects are initialized properly
     * 
     * @return void
     */
    public function test__construct()
    {
        $this->assertTrue($this->_cbErrorHandler->cbXMLHandler instanceof CbXMLHandler);
    }
    
    /**
     * Test if PHP_CodeBrowser errors are loaded properly from XML file and 
     * provide all needed attributes.
     * 
     * SimpleXMLObject is generated by MockObject.
     * 
     * @return void
     */
    public function testGetErrorsByFile()
    {   
        $this->_mockXMLHandler
            ->expects($this->once())
            ->method('loadXML')
            ->with($this->equalTo(self::$_cbXMLFile))
            ->will($this->returnValue(simplexml_load_file(self::$_cbXMLFile)));
            
        $list = $this->_cbErrorHandler->getErrorsByFile(self::$_cbXMLFile, $this->_fileName);
        
        $this->assertType('SimpleXMLElement', $list);
        
        $count = 0;
        foreach ($list as $item) foreach($item->attributes() as $key => $value) {
            if (10 < $count) {
                break 2;
            }
            $this->assertTrue(in_array($key, $this->_neededKeys));
            $this->assertNotNull($value);
            $count++;
        }
    }
    
    /**
     * In case of emty xml file, empty array should be returned.
     * 
     * SimpleXMLObject is generated by MockObject.
     * 
     * @return void
     */
    public function testGetErrorsByFileEmpty()
    {   
        $this->_mockXMLHandler
            ->expects($this->once())
            ->method('loadXML')
            ->with($this->equalTo(self::$_cbXMLBasic))
            ->will($this->returnValue(simplexml_load_file(self::$_cbXMLBasic)));
            
        $list = $this->_cbErrorHandler->getErrorsByFile(self::$_cbXMLBasic, $this->_fileName);
        
        $this->assertTrue(is_array($list) && empty($list));
    }
    
    /**
     * Test if proper file is extrected from XML file.
     * 
     * SimpleXMLObject is generated by MockObject.
     * 
     * @return void
     */
    public function testGetFilesWithErrors()
    {
        $this->_mockXMLHandler
            ->expects($this->once())
            ->method('loadXML')
            ->with($this->equalTo(self::$_cbXMLFile))
            ->will($this->returnValue(simplexml_load_file(self::$_cbXMLFile)));
            
        $this->_mockXMLHandler
            ->expects($this->atLeastOnce())
            ->method('countItems')
            ->will($this->returnValue(rand(1,100)));
        
        $files = $this->_cbErrorHandler->getFilesWithErrors(self::$_cbXMLFile);
        
        $this->assertTrue(5 === count($files[0]));
        $this->assertEquals($this->_fileName, $files[0]['complete']);
    }
    
    /**
     * Test common path extraction. Filtering the path all items have in common.
     * 
     * @return void
     */
    public function testGetCommonSourcePath()
    {
        $test = array(
            array('path' => '/path/to/my' . DIRECTORY_SEPARATOR . 'folder/and/files'),
            array('path' => '/path/to/my' . DIRECTORY_SEPARATOR . 'files'),
            array('path' => '/path/to/my' . DIRECTORY_SEPARATOR . 'other/source/directory')
        );
        
        $result = $this->_cbErrorHandler->getCommonSourcePath($test);
        
        $this->assertEquals('/path/to/my', $result);
    }
    
    /**
     * Test path substitution. Common path should be extracted and replaced.
     * 
     * @return void
     */
    public function testReplaceCommonSourcePath()
    {
        $test = array(
            array(
                'complete' => '/path/to/my' . DIRECTORY_SEPARATOR . 'files/folder/file.txt',
                'path' => '/path/to/my' . DIRECTORY_SEPARATOR . 'files'
            ),
            array(
                'complete' => '/path/to/my' . DIRECTORY_SEPARATOR . 'folder/and/files/otherFile.txt',
                'path' => '/path/to/my' . DIRECTORY_SEPARATOR . 'folder/and/files'
            ),
            array(
                'complete' => '/path/to/my' . DIRECTORY_SEPARATOR . 'other/source/directory/sameFile.txt',
                'path' => '/path/to/my' . DIRECTORY_SEPARATOR . 'other/source/directory
            ')
        );
        
        $result = $this->_cbErrorHandler->replaceCommonSourcePath($test);
        
        $this->assertEquals('files/folder/file.txt', $result[0]['complete']);
        $this->assertEquals('other/source/directory/sameFile.txt', $result[2]['complete']);
        $this->assertEquals('/path/to/my', $result[2]['path']);
    }
    
    /**
     * Test path substitution. Common path should be extracted and replaced.
     * 
     * @return void
     */
    public function testReplaceCommonSourcePathEmpty()
    {
        $test = array(
            array(
                'complete' => DIRECTORY_SEPARATOR . 'baz/to/my/file.txt',
                'path' => DIRECTORY_SEPARATOR . 'baz/to/my'
            ),
            array(
                'complete' => DIRECTORY_SEPARATOR . 'bar/to/my/otherFile.txt',
                'path' => DIRECTORY_SEPARATOR . 'bar/to/my'
            ),
            array(
                'complete' => DIRECTORY_SEPARATOR . 'foo/to/my/sameFile.txt',
                'path' => DIRECTORY_SEPARATOR . 'foo/to/my'
            )
        );
        
        $result = $this->_cbErrorHandler->replaceCommonSourcePath($test);
        
        $this->assertEquals($test, $result);
    }
    
    /**
     * Parse a source folder generating error list and mergin existing errors in this
     * list, if path/file matching is found.
     * In this case no substitution takes place.
     * 
     * @return void
     */
    public function testParseCommonSourcePathNoSubstitution()
    {
        $test = array(
            array(
                'complete' => 'src/XMLGenerator.php',
                'path' => '/path/to/my/files',
                'file' => 'XMLGenerator.php',
                'count_errors' => 10,
                'count_notices' => 12
            ),
            array(
                'complete' => 'src/Plugins/ErrorCPD.php',
                'path' => '/path/to/my/files',
                'file' => 'ErrorCPD.php',
                'count_errors' => 10,
                'count_notices' => 12
            )
        );
        $result = $this->_cbErrorHandler->parseSourceDirectory(PHPCB_SOURCE, $test);
        
        $this->assertEquals('XMLGenerator.php', $result['XMLGenerator.php']['file']);
        $this->assertEquals(0, $result['XMLGenerator.php']['count_errors']);
        $this->assertEquals('ErrorCPD.php', $result['Plugins' . DIRECTORY_SEPARATOR . 'ErrorCPD.php']['file']);
        $this->assertEquals(0, $result['Plugins' . DIRECTORY_SEPARATOR . 'ErrorCPD.php']['count_errors']);
        
        // invlaid source directory
        $result = $this->_cbErrorHandler->parseSourceDirectory(null, $test);
        $this->assertEquals($test, $result);
    }
    
    
    /**
     * Parse a source folder generating error list and mergin existing errors in this
     * list, if path/file matching is found.
     * In this case one substitution takes place.
     * 
     * @return void
     */
    public function testParseCommonSourcePathSubstitution()
    {
        $test = array(
            array(
                'complete' => 'src' . DIRECTORY_SEPARATOR . 'XMLGenerator.php',
                'path' => '/path/to/my/files',
                'file' => 'XMLGenerator.php',
                'count_errors' => 10,
                'count_notices' => 12
            ),
            array(
                'complete' => 'Plugins' . DIRECTORY_SEPARATOR . 'ErrorCPD.php',
                'path' => '/path/to/my/files',
                'file' => 'ErrorCPD.php',
                'count_errors' => 10,
                'count_notices' => 12
            )
        );
        $result = $this->_cbErrorHandler->parseSourceDirectory(PHPCB_ROOT_DIR, $test);
        
        $this->assertEquals('XMLGenerator.php', $result['src' . DIRECTORY_SEPARATOR . 'XMLGenerator.php']['file']);
        $this->assertEquals(10, $result['src' . DIRECTORY_SEPARATOR . 'XMLGenerator.php']['count_errors']);
        $this->assertEquals('ErrorCPD.php', $result['src' . DIRECTORY_SEPARATOR . 'Plugins' . DIRECTORY_SEPARATOR . 'ErrorCPD.php']['file']);
        $this->assertEquals(0, $result['src' . DIRECTORY_SEPARATOR . 'Plugins' . DIRECTORY_SEPARATOR . 'ErrorCPD.php']['count_errors']);
    }
}